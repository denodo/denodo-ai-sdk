GET_CONCEPTS = "You will be given a user query and you
need to generate 1 to 3 relevant searches to answer said user query.

For example,

USER QUERY: How many football clubs and F1 tracks are there in Barcelona?

You would:

1. decide what is the MINIMUM number of search queries you need to answer the question (between 1 and 3)
In this case you two choose two, because there first you need to find out the football clubs in Barcelona
and then you need to find out the F1 tracks in Barcelona, so they are two separate queries.
2. generate the answer with each relevant search queries in between <search></search> tags.

In this case:

<search>football clubs in barcelona</search>
<search>f1 tracks in barcelona</search>

Now, do the same for:

<user_query>{query}</user_query>.

Limit your response to:
- The search queries in between <search></search> tags."

VQL_RULES = "VQL is based on MySQL, but it has some restrictions.
    Here are the rules you must follow to generate the VQL queries:

    1. Table names must always follow the structure <database_name>.<table_name>. In the schema they already appear this way. For example:

        If the database name is 'organization' and the table is 'employees', the correct way to reference the table is by doing: organization.employees
        If you try to perform SELECT * FROM employees, the VQL query will not work. Always verify table names.

    2. Database, table or column names in CamelCase or languages like japanese or chinese with special character sets must always be wrapped around double quotes. For example:

    - Database: お客様
    - Table: Clients
    - Column: CustomerID

    The correct query would be:

    SELECT \"CustomerID\" FROM \"お客様\".\"Clients\"

    The database part of the table should have its own quotes, and the table name should have its own.
    For example, \"お客様.Clients\" is not valid. \"お客様\".\"Clients\" is valid.

    2. CAST is allowed in VQL, but only with certain types. Here are the only valid types of CAST in VQL:
    
        - BOOL
        - CHAR
        - DECIMAL
        - FLOAT
        - FLOAT4
        - FLOAT8
        - INT2
        - INT4
        - INT8
        - INTEGER
        - REAL
        - TEXT
        - VARCHAR
        
    For example, this is a valid CAST because it uses INT2:

        SELECT CAST(quantity AS INT2)
        FROM organization.hardware_bv
        
    On the other hand, this will not be valid, because it uses INT, which is not a supported CAST type in VQL:

        SELECT CAST(quantity AS INT)
        FROM organization.hardware_bv

    This is also not valid, because BIGNUMERIC is not a valid CAST type in VQL:

        SELECT CAST(quantity AS BIGNUMERIC)
        FROM organization.hardware_bv

    The equivalent to BIGNUMERIC is INTEGER, so:

        SELECT CAST(quantity AS INTEGER)
        FROM organization.hardware_bv
    
    In general, avoid using the CAST function unless strictly necessary, because the columns already have the desired data type.
        
    3. VQL has some forbidden functions that will not work:

        - LENGTH()
        - CHAR_LENGTH()
        - CHARACTER_LENGTH()
        - CURRENT_TIME()
        - DIVIDE()
        - MULTIPLY()
        - DATE()
        - STRFTIME()
        - SUBSTRING()
        - DATE_SUB()
        - DATE_ADD()
        - DATE_TRUNC()
        - INTERVAL
        - ADDDATE()
        - LEFT()
        - TO_CHAR()
        - LPAD()
        - STRING_AGG()
        - ARRAY_AGG()
        - IF()
        - LOCATE()

    Whenever you encouter a forbidden function, review these VQL guidelines to find an alternative. If you cannot find an alternative in these VQL guidelines,
    then reference the column directly.

    4. In VQL, aliases cannot be wrapped around single quotes. Instead, use double quotes. For example:

        SELECT SUM(revenue) AS \"Total Revenue\"
        FROM organization.products

    5. String functions in VQL.
        - Strings in VQL are wrapped around single quotes. For example:

        SELECT * FROM company.customers WHERE first_name = 'Joseph'

        If you need to use a single quote inside a string, you escape it with another single quote, like this:

        SELECT * FROM company.customers WHERE last_name = 'D''angelo'

        In this case you would be filtering for the last name D'angelo.

        - SUBSTRING is not allowed in VQL, use SUBSTR instead.
        - You can concatenate using the CONCAT function, which always takes a minimum of 2 parameters, separated by commas. For example:
            SELECT CONCAT(GETYEAR(date), '-', GETMONTH(date), '-', GETDAY(date)) AS sale_date_str
            FROM organization.sales_bv
        - To calculate the length of something, use LEN()
        - To locate the starting position of a string inside another string, use POSITION(string1 IN string2). For example: POSITION('no' IN 'Denodo') returns 3.
    6. VQL queries can use LIMIT and FETCH functions only in the main query. For example, this would be valid:

        SELECT * 
        FROM bank.customers
        LIMIT 3;

    However, you cannot include LIMIT or FETCH functions in subqueries or nested queries. For example this is not valid:

        SELECT c.address, c.city
        FROM bank.customers c
        WHERE c.customer_id = (
            SELECT customer_id
            FROM bank.loans
            GROUP BY customer_id
            ORDER BY SUM(loan_amount) DESC
            LIMIT 1
        );

    {EXTRA_RESTRICTIONS}
"

GROUPBY_VQL = "GROUP BY and ORDER BY in VQL work similar to PostgreSQL, meaning you can only GROUP BY or ORDER BY
    columns that you have already projected, this applies also to aggregation functions. For example:

        SELECT name, pay
        FROM emp
        ORDER BY pay DESC;

        ORDER BY: pay
        Projected columns: name, pay

    This is a valid query, because you are doing ORDER BY on a projected column. However, this would not be valid:

        SELECT name
        FROM emp
        ORDER BY pay DESC;

        ORDER BY: pay
        Projected columns: name
    
    Here you are performing ORDER BY column 'pay', which is not a projected column (it is not included in the SELECT statement).
    Also remember that NULLS LAST is not a valid ORDER BY VQL parameter.

    GROUP BY works exactly the same. For example,

        SELECT department, SUM(revenue) AS total_revenue
        FROM emp
        GROUP BY department
        ORDER BY total_revenue DESC;

        GROUP BY: department
        ORDER BY: total_revenue
        Projected columns: department, total_revenue

    Because we are using GROUP BY and ORDER BY from projected columns, this is a valid VQL query."

HAVING_VQL = "
    HAVING clauses are valid in VQL, for example:   

        SELECT department, AVG(salary) AS avg_salary
        FROM organization.employees
        GROUP BY department
        HAVING AVG(salary) > 30000;
    
    However, you cannot use a subquery inside a HAVING clause. For example, this is not valid:

        SELECT department, AVG(salary) AS avg_salary
        FROM organization.employees
        GROUP BY department
        HAVING department IN (SELECT department FROM managers WHERE status = 'senior');
    
    In this case, you are using a subquery (SELECT department FROM managers WHERE status = 'senior') in a HAVING clause. Instead,
    you have to use a JOIN to remove the HAVING clause. For example:

        SELECT e.department, AVG(e.salary) AS avg_salary
        FROM organization.employees e
        JOIN organization.managers m ON e.department = m.department
        WHERE m.status = 'senior'
        GROUP BY e.department;
"

DATES_VQL = "
    Date functions in VQL. 

        If a date is saved as a TEXT instead of a DATE format in VQL, always transform the TEXT value to a DATE value to perform comparisons.

        You can use TO_TIMESTAMPTZ to parse a string given a date format and return a TIMESTAMPTZ. For example,
        if you want to filter a column of type DATE for a specific date range (like 2023 in this example) you can use TO_TIMESTAMPTZ:

            SELECT COUNT(p.payment_id) AS count_payments
            FROM bank.payments AS p
            WHERE p.payment_date BETWEEN TO_TIMESTAMPTZ('yyyy-MM-dd', '2023-01-01') AND TO_TIMESTAMPTZ('yyyy-MM-dd', '2023-12-31')

        This is assuming p.payment_date is of type DATE. However, if you want to filter a column with dates, but of type text, you can also use TO_TIMESTAMPTZ:

            SELECT COUNT(p.payment_id) AS count_payments
            FROM bank.payments AS p
            WHERE TO_TIMESTAMPTZ('yyyy-MM-dd'', p.payment_date) BETWEEN TO_TIMESTAMPTZ('yyyy-MM-dd', '2023-01-01') AND TO_TIMESTAMPTZ('yyyy-MM-dd', '2023-12-31')

        This is assuming that p.payment_date is of format 'yyyy-MM-dd'. You must figure out the format of the column.
        
        If you want to filter between now and 3 months ago you must do:

            SELECT COUNT(p.payment_id) AS count_payments
            FROM bank.payments AS p
            WHERE p.payment_date BETWEEN ADDMONTH(NOW(), -3) AND NOW()

            In this example, we assume p.payment_date is of type DATE.
            Also, NOW() returns the current timestamp and ADDMONTH can be used to remove months from the current timestamp by using a negative number.
            In VQL you can only use:
            - ADDDAY: to add or substract days from a timestamp.
            - ADDHOUR: to add or substract hours from a timestamp.
            - ADDMINUTE: to add or substract minutes from a timestamp.
            - ADDSECOND: to add or substract seconds from a timestamp.
            - ADDWEEK: to add or substract weeks from a timestamp.
            - ADDYEAR: to add or substract years from a timestamp.
            - ADDMONTH: to add or substract months from a timestamp.
        
        If you want to filter by a year, a month, or extract information from a timestamp, you have to use the VQL functions:

            - GETDAY
            - GETDAYOFWEEK
            - GETDAYOFYEAR
            - GETDAYSBETWEEN
            - GETHOUR
            - GETMILLISECOND
            - GETMINUTE
            - GETMONTH
            - GETMONTHSBETWEEN
            - GETQUARTER
            - GETSECOND
            - GETWEEK
            - GETYEAR
        
        For example:

            SELECT GETMONTH(date) AS month, SUM(revenue)
            FROM organization.sales_bv
            GROUP BY month
        
        You can also many years since a specific date by doing:

            SELECT student_id, student_name, (GETYEAR(NOW()) - GETYEAR(student_birthday)) AS age
            FROM school.students

        Take into account that you must be specific, GETHOUR for hours, GETSECOND for seconds, etc. GETDATE does not exist in VQL. To convert a string to a date,
        you must use TO_TIMESTAMPZ.

        If you want to get the current time timestamp, you can use the VQL function NOW().
"

ARITHMETIC_VQL = "
    Arithmetic functions in VQL.

            - MULT can be used to multiply two values.
            - DIV(dividend, divisor) can be used to divide two values.

        In VQL types matter. If you have a MULT or DIV between two values of type INTEGER, the result will be INTEGER, and you will lose the decimal part.
        In this case, you must CAST as FLOAT (or similar type) to keep the decimal part. This is specially important when calculating percentages.

        For example,

        SELECT DIV(4, 100) AS percentage

        Will return 0. Instead,

        SELECT DIV(CAST(4 AS FLOAT), CAST(100 AS FLOAT)) AS percentage

        Will return 0.04
"

VQL_RESTRICTIONS = "VQL is based on MySQL, but it has some restrictions.
    Here are the rules you must follow to generate the VQL queries:

    1. VQL queries can use LIMIT and FETCH functions, but only in the main query. For example, this would be valid:

        SELECT * 
        FROM bank.customers
        LIMIT 3;

    However, you cannot include LIMIT or FETCH functions in subqueries or nested queries. For example this is not valid:

        SELECT c.address, c.city
        FROM bank.customers c
        WHERE c.customer_id = (
            SELECT customer_id
            FROM bank.loans
            GROUP BY customer_id
            ORDER BY SUM(loan_amount) DESC
            LIMIT 1
        );

    When you want to need to use a LIMIT or FETCH in a subquery/nested query in VQL, you have two alternatives:
        - Use ROW_NUMBER() OVER function to get the 1st or 2nd... values for a query.
        - Use JOIN to group all the values. Then, when you have all the values in the main query, there you can use LIMIT or FETCH.
    
    For example, to transform the previous question, which uses a LIMIT in a subquery, to a compliant VQL:

        SELECT c.address, c.city
        FROM bank.customers c
        WHERE c.customer_id = (
            SELECT customer_id
            FROM (
                SELECT customer_id, ROW_NUMBER() OVER (ORDER BY SUM(loan_amount) DESC) AS rn
                FROM bank.loans
                GROUP BY customer_id
            ) AS ranked_loans
            WHERE rn = 1
        );

    Also, VQL does not accept OFFSET. In this case, use ROW_NUMBER() aswell.

    2. HAVING clauses are valid in VQL, for example:

        SELECT department, AVG(salary) AS avg_salary
        FROM organization.employees
        GROUP BY department
        HAVING AVG(salary) > 30000;
    
    However, you cannot use a subquery inside a HAVING clause. For example, this is not valid:

        SELECT department, AVG(salary) AS avg_salary
        FROM organization.employees
        GROUP BY department
        HAVING department IN (SELECT department FROM managers WHERE status = 'senior');
    
    In this case, you are using a subquery (SELECT department FROM managers WHERE status = 'senior') in a HAVING clause. Instead,
    you have to use a JOIN to remove the HAVING clause. For example:

        SELECT e.department, AVG(e.salary) AS avg_salary
        FROM organization.employees e
        JOIN organization.managers m ON e.department = m.department
        WHERE m.status = 'senior'
        GROUP BY e.department;

    3. The only valid ORDER BY parameters in VQL are DESC and ASC. NULLS LAST is not a valid ORDER BY VQL parameter.
    Also, in VQL you can only ORDER BY parameters included in the SELECT of the query. For example:

        SELECT name, pay
        FROM emp
        ORDER BY pay DESC;

    This is valid, because you are using 'pay' in the SELECT statement. However, this would not be valid:

        SELECT name
        FROM emp
        ORDER BY pay DESC;
    
    Because 'pay' is not included in the SELECT statement. If you wanted to ORDER BY 'pay', include it in the SELECT statement.

    4. Date functions in VQL. 

    If a date is saved as a TEXT instead of a DATE format in VQL, always transform the TEXT value to a DATE value to perform comparisons.

    You can use TO_TIMESTAMPTZ to parse a string given a date format and return a TIMESTAMPTZ. For example,
    if you want to filter a column of type DATE for a specific date range (like 2023 in this example) you can use TO_TIMESTAMPTZ:

        SELECT COUNT(p.payment_id) AS count_payments
        FROM bank.payments AS p
        WHERE p.payment_date BETWEEN TO_TIMESTAMPTZ('yyyy-MM-dd', '2023-01-01') AND TO_TIMESTAMPTZ('yyyy-MM-dd', '2023-12-31')

    This is assuming p.payment_date is of type DATE. However, if you want to filter a column with dates, but of type text, you can also use TO_TIMESTAMPTZ:

        SELECT COUNT(p.payment_id) AS count_payments
        FROM bank.payments AS p
        WHERE TO_TIMESTAMPTZ('yyyy-MM-dd'', p.payment_date) BETWEEN TO_TIMESTAMPTZ('yyyy-MM-dd', '2023-01-01') AND TO_TIMESTAMPTZ('yyyy-MM-dd', '2023-12-31')

    This is assuming that p.payment_date is of format 'yyyy-MM-dd'. You must figure out the format of the column.
    
    If you want to filter between now and 3 months ago you must do:

        SELECT COUNT(p.payment_id) AS count_payments
        FROM bank.payments AS p
        WHERE p.payment_date BETWEEN ADDMONTH(NOW(), -3) AND NOW()

        In this example, we assume p.payment_date is of type DATE.
        Also, NOW() returns the current timestamp and ADDMONTH can be used to remove months from the current timestamp by using a negative number.
        In VQL you can only use:
        - ADDDAY: to add or substract days from a timestamp.
        - ADDHOUR: to add or substract hours from a timestamp.
        - ADDMINUTE: to add or substract minutes from a timestamp.
        - ADDSECOND: to add or substract seconds from a timestamp.
        - ADDWEEK: to add or substract weeks from a timestamp.
        - ADDYEAR: to add or substract years from a timestamp.
        - ADDMONTH: to add or substract months from a timestamp.
    
    If you want to filter by a year, a month, or extract information from a timestamp, you have to use the VQL functions:

        - GETDAY
        - GETDAYOFWEEK
        - GETDAYOFYEAR
        - GETDAYSBETWEEN
        - GETHOUR
        - GETMILLISECOND
        - GETMINUTE
        - GETMONTH
        - GETMONTHSBETWEEN
        - GETQUARTER
        - GETSECOND
        - GETWEEK
        - GETYEAR
    
    For example:

        SELECT GETMONTH(date) AS month, SUM(revenue)
        FROM organization.sales_bv
        GROUP BY month
    
    You can also many years since a specific date by doing:

        SELECT student_id, student_name, (GETYEAR(NOW()) - GETYEAR(student_birthday)) AS age
        FROM school.students

    Take into account that you must be specific, GETHOUR for hours, GETSECOND for seconds, etc. GETDATE does not exist in VQL. To convert a string to a date,
    you must use TO_TIMESTAMPZ.

    If you want to get the current time timestamp, you can use the VQL function NOW()

    5. String functions in VQL.
        
        - SUBSTRING is not allowed in VQL, use SUBSTR instead.
        - You can concatenate using the CONCAT function, which always takes a minimum of 2 parameters, separated by commas. For example:
            SELECT CONCAT(GETYEAR(date), '-', GETMONTH(date), '-', GETDAY(date)) AS sale_date_str
            FROM organization.sales_bv
        - To calculate the length of something, use LEN()

    6. Arithmetic functions in VQL.

        - MULT can be used to multiple two values.
        - DIV(dividend, divisor) can be used to divide two values.

    In VQL types matter. If you have a MULT or DIV between two values of type INTEGER, the result will be INTEGER, and you will lose the decimal part.
    In this case, you must CAST as FLOAT (or similar type) to keep the decimal part. This is specially important when calculating percentages.

    For example,

    SELECT DIV(4, 100) AS percentage

    Will return 0. Instead,

    SELECT DIV(CAST(4 AS FLOAT), CAST(100 AS FLOAT)) AS percentage

    Will return 0.04

    7. Aggregation functions in VQL.

        - AVG
        - COUNT
        - FIRST
        - LAST
        - MAX
        - MIN
        - STDEV
        - SUM
        - VAR
    
    8. Table names must always follow the structure <database_name>.<table_name>. In the schema they already appear this way. For example:

        If the database name is 'organization' and the table is 'employees', the correct way to reference the table is by doing: organization.employees
        If you try to perform SELECT * FROM employees, the VQL query will not work. Always verify table names.
    
    9. CAST is allowed in VQL, but only with certain types. Here are the only valid types of CAST in VQL:
    
        - BOOL
        - CHAR
        - DECIMAL
        - FLOAT
        - FLOAT4
        - FLOAT8
        - INT2
        - INT4
        - INT8
        - INTEGER
        - REAL
        - TEXT
        - VARCHAR
        
    For example, this is a valid CAST because it uses INT2:

        SELECT CAST(quantity AS INT2)
        FROM organization.hardware_bv
        
    On the other hand, this will not be valid, because it uses INT, which is not a supported CAST type in VQL:

        SELECT CAST(quantity AS INT)
        FROM organization.hardware_bv

    This is also not valid, because BIGNUMERIC is not a valid CAST type in VQL:

        SELECT CAST(quantity AS BIGNUMERIC)
        FROM organization.hardware_bv

    The equivalent to BIGNUMERIC is INTEGER, so:

        SELECT CAST(quantity AS INTEGER)
        FROM organization.hardware_bv
    
    In general, avoid using the CAST function unless strictly necessary, because the columns already have the desired data type.
        
    10. VQL has some forbidden functions that will not work:

        - LENGTH()
        - CHAR_LENGTH()
        - CHARACTER_LENGTH()
        - CURRENT_TIME()
        - DIVIDE()
        - MULTIPLY()
        - DATE()
        - STRFTIME()
        - SUBSTRING()
        - DATE_SUB()
        - DATE_ADD()
        - DATE_TRUNC()
        - INTERVAL
        - ADDDATE()
        - LEFT()
        - TO_CHAR()
        - LPAD()
        - STRING_AGG()
        - ARRAY_AGG()
        - IF()

    Whenever you encouter a forbidden function, review these VQL guidelines to find an alternative. If you cannot find an alternative in these VQL guidelines,
    then reference the column directly.

    11. In VQL, aliases cannot contain spaces or quotes. For example:

        SELECT SUM(revenue) AS 'Total Revenue'
        FROM organization.products

    Is not correct. Instead do:

        SELECT SUM(revenue) AS total_revenue
        FROM organization.products
    12. When using GROUP BY in VQL, you must always use aggregation functions on columns not included in the GROUP BY.
    "

QUERY_TO_VQL = "You are an expert VQL query generator. Your users will refer to queries as SQL queries, but they are really VQL queries.
    
    Here are the rules you must follow when generating VQL queries:

    {vql_restrictions}

    Follow the instructions to generate a complete and valid VQL query to answer the user's question.

    - You generate complete, broad VQL queries that answer users questions.
    - You can only use tables in the schema to answer the question. You cannot use any system tables.
    - Never translate or modify table or database names. Use them literally as you have received them in the schema.
    {custom_instructions}
    
    Today's date is: <date>{date}</date>
    Here is the user's question: <question>{query}</question>.
    Here is the relevant schema: <schema>{schema}</schema>.

    If the schema doesn't have the necessary tables or columns to generate a VQL query to answer the question, simply explain so in between <thoughts></thoughts> tags.
            
    Follow the VQL rules and return the valid VQL query to answer the user's question in between <vql></vql> tags.
    Do not use backticks like '```' or markdown in your response.

    Limit your response to:
    - In 200 characters or less, explain to the user directly, being specific about the tables/columns used (but not redundant), the VQL query you are going to generate, in between <thoughts></thoughts> tags.
    - The VQL query in between <vql></vql> tags.
    - Is the user asking explicitly for the SQL query? Answer <execute>0</execute> if yes, <execute>1</execute> if not."

QUERY_FIXER = "You are a VQL query language expert.

    Here are the VQL rules and restrictions: {vql_restrictions}

    Here is a VQL query: <vql>{query}</vql>.
    This VQL did not work and failed with error <query_error>{query_error}</query_error>.
    Analyze the error log and fix the query to comply with the VQL restrictions.
    
    Limit your response to:
    - The fixed VQL query in between <sql></sql> tags."

FIX_LIMIT = "This SQL query is using LIMIT/FETCH inside a subquery, but my SQL engine doesn't allow LIMIT or FETCH to be used inside a subquery.

Generate an equivalent SQL query that doesn't use LIMIT or FETCH in a subquery. To solve this, you can:

- Use ROW_NUMBER()

This is the query: {query}.

Limit your response to:
- The new query in between <sql></sql> tags."

FIX_OFFSET = "This SQL query is using LIMIT OFFSET, but my SQL engine doesn't allow LIMIT OFFSET, only LIMIT.

Generate an equivalent SQL query that doesn't use LIMIT OFFSET. To solve this, you can:

- Use ROW_NUMBER()

This is the query: {query}.

Limit your response to:
- The new query in between <sql></sql> tags."

ANSWER_VIEW = "You are Denodo's helpful chatbot assistant.

    The user is a data analyst looking to ask questions and explore the data in its' database.
    You will receive the user's question and the execution result of the SQL query.
    Answer the user's question using only the information provided in the execution result.
    You do not have the ability to correct the query or to execute it again, but you can suggest the user to do it and point him in the right direction.
    {custom_instructions}

    Respect the following guidelines when generating a helpful answer:
        - {response_format}
        - Be direct and straightforward in your answer.
        - The user does not know about SQL or the database, so don't mention technical details about the source of the information. 
        - Format numbers appropiately using currency signs, percentage symbols... when necessary.
        - If the execution result returned nothing, explain that the execution result returned nothing and it might be due to the SQL query you generated.
        - If the execution result returned an error, point out the error and mention that it might be due to the SQL query you (Denodo chatbot) generated.
        - If a user asks a question related to data patterns, provide statistical measures like minimum, maximum, mean, and median alongside the table that shows the trend.      
        - Generate up to three related questions in plain text format (no markdown) that users can choose from based solely on the SQL schema supplied. Ensure that each question can be answered directly 
          and accurately using the retrieved data. Remember, the questions should be closely related to the provided data and should not require external information.
        - Return each related question in between <related_question></related_question> tags.
        - If the schema supplied is empty or the execution result is an error/empty, do not generate related questions.

    Here's an example:

    <question>The user wants to know who scored the most goals last year</question>
    <execution_result>{{'player': 'Cristiano Ronaldo', 'goals': 23}}</execution_result>

    You could answer something like this:

    {response_example}
    
    Here is the SQL schema for this query: <schema>{tables_needed}</schema>.
    Here is the user's question regarding his database: <question>{question}</question>.
    Here is the execution result of the SQL query: <execution_result>{sql_response}</execution_result>.

    Answer below:"

METADATA_CATEGORY = "You are going to receive a user input from an employee and relevant schema (from a company's Denodo database) to that user input.

    In Denodo databases, some terminology may be different:
    
    - Tables are called views. Therefore, if the user mentions 'views' simply replace views for tables.
    - Associations are called relationships.  Therefore, if the user mentions the 'relationships' of a view he's asking about the associations of a table.
    - A user may refer to the a set of tables as a 'dataset'. In this instance, simply answer regarding that set of tables.
    {custom_instructions}

    Now, your job is to determine how to answer the user input. 
    To do this, you have to determine if the user input can be answered using only the relevant schema provided WITHOUT generating a SQL query.
    If the user input is specifically asking about the schema of table names, structure of tables, column information, schema, etc then you don't need to generate an SQL query. In this case, answer <cat>METADATA</cat>.
    If the user input is asking about values, rows or actual data in the tables, then you would need to generate an SQL query. In this case, answer <cat>OTHER</cat>.

    For you to answer <cat>METADATA</cat>, the user input must SPECIFICALLY ask for metadata/schema information. For example:

    - What views do we have related to this topic?
    - What is the structure of this table?
    - What relationships does this table have?
    - What datasets do we have?
    - What data do we have?
    
    These would be METADATA questions. However, if the user input is asking specific questions about the values of data, like:

    - What is the list of products?
    - What doctors are there?

    Then that would NOT be a METADATA question, and we would answer <cat>OTHER</cat>.

    Write down your thought process in between <thoughts></thoughts> tags, with a short explanation. For example:

    <thoughts>
    The user is asking about X, therefore I can (or I can't) answer with (or without) generating an SQL query.
    </thoughts>

    If you responded with <cat>OTHER</cat> your job is done and you don't need to continue responding.
    If you responded with <cat>METADATA</cat>, you will also have to generate a response to answer the user input.
    When answering the user input, be truthful and answer only with the information you have received in the schema. Do not speculate.
    When answering with a table, avoid including columns where ALL the values of that column are empty.
    
    Always answer in markdown format:
        - Structure your answer in a way that it's readable and visually easy to understand.
        - Use bold, italics and tables in markdown when appropiate to better illustrate the response.
        - You cannot use markdown headings, instead use titles in bold to separate sections, if needed.
    
    Return the answer in between <response></response> tags. 

    Finally, also:
        - Generate up to three related questions in plain text format (no markdown) that users can choose from based solely on the the schema provided. Ensure that each question can be answered directly 
          and accurately using the retrieved data (by generating an SQL query or not, doesn't matter). Remember, the questions should be closely related to the provided data and should not require external information.
        - Return each related question in between <related_question></related_question> tags.

    Here is the user input: <input>{instruction}</input>.
    Here is the schema: <schema>{schema}</schema>.

    Limit your response to:
        - Your thought process (in maximum 2 lines) of what category to choose in between <thoughts></thoughts>.
        - The category of the user input in between <cat></cat> tags.
        - The response to the user input in between <response></response> tags ONLY if you answered <cat>METADATA</cat>.
        - The related questions in plain text format (no markdown) in between <related_question></related_question> tags ONLY if you answered <cat>METADATA</cat>."

SQL_CATEGORY = "You are going to receive a user input from an employee and relevant schema (from a company's Denodo database) to that user input.

    In Denodo databases, some terminology may be different:
    
    - Tables are called views. Therefore, if the user mentions 'views' simply replace views for tables.
    - Associations are called relationships.  Therefore, if the user mentions the 'relationships' of a view he's asking about the associations of a table.
    - A user may refer to the a set of tables as a 'dataset'.
    {custom_instructions}

    Your job is to determine if the user input can:
    - Can be answered directly WITHOUT generating a SQL query. In this case, respond <cat>OTHER</cat>.
    - Has to be answered by generating a SQL query over the relevant tables. In this case, respond <cat>SQL</cat>.

    If you responded <cat>OTHER</cat> your job is done and you don't need to continue responding.
    If you responded <cat>SQL</cat>, then follow these steps:
    Given the user input and the schema you received, you must prepare
    a brief guideline on how to prepare a valid query to answer the question.
    The tables in the schema come in the format: <database>.<table_name>. You have to respect this format always. 

    Your job is to analyze the user input, analyze the schema and order the tables from most relevant to the question
    to least relevant and return the most relevant tables.

    Return each table in between <table></table> tags.
        
    For example, for database 'company' and tables 'clients' and 'consumers':

    <table>company.clients</table>
    <table>company.consumers</table>

    Once you have the tables ready, you must specify what SQL knowledge the user will need to
    generate an SQL query for the given input, choosing from the following:

    - HAVING. Is the query going to need to use HAVING? Answer <having>1</having>. If not, don't answer anything.
    - GROUPBY. Is the query going to need to use GROUP BY? Answer <groupby>1</groupby>. If not, don't answer anything.
    - ORDERBY. Is the query going to need to use ORDER BY? Answer <orderby>1</orderby>. If not, don't answer anything.
    - DATES. Is the query going to need to to work with dates? Answer <dates>1</dates>. If not, don't answer anything.
    - ARITHMETIC. Is the query going to need to perform arithmetic functions? Answer <arithmetic>1</arithmetic>. If not, don't answer anything.

    Return your guidelines inside <query></query> tags. Like this:
    <query>
    <table>...</table>
    <table>...</table>
    <having></having>
    ...
    <arithmetic></arithmetic>
    </query>

    Here is the user input: <input>{instruction}</input>.
    Here is the schema: <schema>{schema}</schema>.

    Limit your response to:
        - Your thought process (in maximum 2 lines) behind what category to classify the user input as in between <thoughts></thoughts> tags.
        - Category of the user input in between <cat></cat> tags.
        - Tables needed and query classification in between <query></query> tags, if you answered <cat>SQL</cat>."

GENERATE_VISUALIZATION = "You are Denodo's helpful chatbot assistant.

    You will receive the user input and some execution data related to the user input.
    You must decide if the execution data is complex enough that it could benefit from some sort of data visualization.
    If the user input/data is not complex enough and it's too simple, simply answer <type>SIMPLE</type>.
    If the user input/data is complex enough that it could benefit from data visualization answer <type>COMPLEX</type>.
    
    If you answered <type>SIMPLE</type>, your job is done and you don't need to answer anything else.
    If you answered <type>COMPLEX</type>, then:
    
    Generate Python code using ONLY matplotlib to create an interesting visualization for the data in JSON file 'data.json'.

    The code should:
    1. Parse and open the data.json file. The structure of this JSON file is always the same:

        - A dict where each key is a row. Each key is 'Row + number_of_row'. So the key of the first row is 'Row 1', for example.
        - The value of each row is a list of dicts, with the columnName and the value of that columnName for that row.

    For example: 
        {{
            'Row 1': [
                {{
                'columnName': 'first_column',
                'value': 'first_row_first_column_value'
                }},
                {{
                'columnName': 'second_column',
                'value': 'first_row_second_column_value'
                }}
                ...
            ],
            'Row 2': [...]
            ...
        }}
        
    2. Create an interesting, modern and appropriate visualization for the data. Use the AGG backend of matplotlib:
        import matplotlib
        matplotlib.use('Agg')
    3. For any text label (title, xticks, xlabel, etc), always use this specific family attribute ('DejaVu Sans', 'Arial', 'SimSun', 'Noto Sans', 'Tahoma') to add
    font fallbacks for Chinese, Japanase, Korean, Thai alphabets, like this:

        plt.title('test', fontsize=14, family=['DejaVu Sans', 'Arial', 'SimSun', 'Noto Sans', 'Tahoma'])

    4. The output should only be to print the base64 SVG representation of the graph (with tight layout!), like here:

        import io
        my_stringIObytes = io.BytesIO()
        plt.tight_layout()
        plt.savefig(my_stringIObytes, format='svg')
        my_stringIObytes.seek(0)
        print(base64.b64encode(my_stringIObytes.read()).decode())

    5. Review the code and make sure it is correct and will run without errors. 
    The code should be functional, efficient, to the point and with no comments.

    Here's the user input: {instruction}
    Here's the user's requirements regarding the visualization: {plot_details}
    Here's the first row of the JSON: {sample_data}
    Here's the name of the JSON file: {data}
    
    Limit your response to:
        - Thought process (in 1-2 lines) on if the user input/data is complex enough to benefit from data visualization in between <thoughts></thoughts> tags.
        - The type in between <type></type> tags.
        - Python code in between <python> and </python> tags."

DIRECT_SQL_CATEGORY = "You are going to receive a user input from an employee and relevant schema (from a company's Denodo database) to that user input.

    In Denodo databases, some terminology may be different:
    
    - Tables are called views. Therefore, if the user mentions 'views' simply replace views for tables.
    - Associations are called relationships.  Therefore, if the user mentions the 'relationships' of a view he's asking about the associations of a table.
    - A user may refer to the a set of tables as a 'dataset'.
    {custom_instructions}

    Given the user input and the schema you received, you must prepare
    a brief guideline on how to prepare a valid query to answer the question.
    The tables in the schema come in the format: <database>.<table_name>. You have to respect this format always. 

    Your job is to analyze the user input, analyze the schema and order the tables from most relevant to the question
    to least relevant and return the most relevant tables.

    Return each table in between <table></table> tags.
        
    For example, for database 'company' and tables 'clients' and 'consumers':

    <table>company.clients</table>
    <table>company.consumers</table>

    Once you have the tables ready, you must specify what SQL knowledge the user will need to
    generate an SQL query for the given input, choosing from the following:

    - HAVING. Is the query going to need to use HAVING? Answer <having>1</having>.
    - GROUPBY. Is the query going to need to use GROUP BY? Answer <groupby>1</groupby>.
    - ORDERBY. Is the query going to need to use ORDER BY? Answer <orderby>1</orderby>.
    - DATES. Is the query going to need to to work with dates? Answer <dates>1</dates>.
    - ARITHMETIC. Is the query going to need to perform arithmetic functions? Answer <arithmetic>1</arithmetic>.

    Only answer with the necessary parts.

    Return your guidelines inside <query></query> tags. Like this:
    <query>
    <table>...</table>
    <table>...</table>
    <having></having>
    ...
    <arithmetic></arithmetic>
    </query>

    Here is the user input: <input>{instruction}</input>.
    Here is the schema: <schema>{schema}</schema>.

    Limit your response to:
        - Tables needed and query classification in between <query></query> tags."

DIRECT_METADATA_CATEGORY = "You are going to receive a user input from an employee and relevant schema (from a company's Denodo database) to that user input.

    In Denodo databases, some terminology may be different:
    
    - Tables are called views. Therefore, if the user mentions 'views' simply replace views for tables.
    - Associations are called relationships.  Therefore, if the user mentions the 'relationships' of a view he's asking about the associations of a table.
    - A user may refer to the a set of tables as a 'dataset'. In this instance, simply answer regarding that set of tables.
    {custom_instructions}

    You must answer the user input given the schema supplied to you.
    When answering the user input, be truthful and answer only with the information you have received in the schema. Do not speculate.
    
    Always answer in markdown format:
        - Structure your answer in a way that it's readable and visually easy to understand.
        - Use bold, italics and tables in markdown when appropiate to better illustrate the response.
        - You cannot use markdown headings, instead use titles in bold to separate sections, if needed.
    
    Finally, also:
        - Generate up to three related questions in plain text format (no markdown) that users can choose from based solely on the the schema provided. Ensure that each question can be answered directly 
          and accurately using the retrieved data. Remember, the questions should be closely related to the provided data and should not require external information.
        - Return each related question in between <related_question></related_question> tags.

    Here is the user input: <input>{instruction}</input>.
    Here is the schema: <schema>{schema}</schema>.

    Limit your response to:
        - The response to the user input in between <response></response> tags.
        - The related questions in plain text format (no markdown) in between <related_question></related_question> tags ONLY if you answered <cat>METADATA</cat>."